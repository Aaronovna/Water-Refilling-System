/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package wrs;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.JOptionPane;
import java.util.Date;
import java.text.SimpleDateFormat;

/**
 *
 * @author PC
 */
public class Order extends javax.swing.JFrame {

    /**
     * Creates new form Order
     */
    public Order() {
        initComponents();
        fetchCustomerData();
        updateGallon();
        
    }
    
    public void updateGallon()
    {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try
        {
            conn = SystemWRS.MsSqlDB();
            ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
            ps.setString(1, "Gallon_Slim");
            rs = ps.executeQuery();
            int slim_val = 0;
            int slim_val_total = 0;
            if (rs.next())
            {
                slim_val = rs.getInt("value");
                slim_val_total = rs.getInt("total");
            }
            
            String db_slim_value = Integer.toString(slim_val);
            if(SystemWRS.calcPercent(slim_val_total,slim_val) <= 30.0 && SystemWRS.calcPercent(slim_val_total,slim_val) >= 11.0)
            {
                slimLBL.setForeground(Color.blue);
            }
            else if(SystemWRS.calcPercent(slim_val_total,slim_val) <= 10.0)
            {
                slimLBL.setForeground(Color.red);
            }
            slimLBL.setText("Slim: " + db_slim_value);

            ps.setString(1, "Gallon_Round");
            rs = ps.executeQuery();
            int round_val = 0;
            int round_val_total = 0;
            if (rs.next())
            {
                round_val = rs.getInt("value");
                round_val_total = rs.getInt("total");
            }
            String db_round_value = Integer.toString(round_val);
            
            
            if(SystemWRS.calcPercent(round_val_total,round_val) <= 30.0 && SystemWRS.calcPercent(round_val_total,round_val) >= 11.0)
            {
                roundLBL.setForeground(Color.blue);
            }
            else if(SystemWRS.calcPercent(round_val_total,round_val) <= 10.0)
            {
                roundLBL.setForeground(Color.red);
            }
            roundLBL.setText("Round: " + db_round_value);
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transactionTypeBGP = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        serviceCBX = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        gallonCBX = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        CIDFLD = new javax.swing.JTextField();
        nameFLD = new javax.swing.JTextField();
        addressFLD = new javax.swing.JTextField();
        contactFLD = new javax.swing.JTextField();
        quantityFLD = new javax.swing.JTextField();
        cancelBTN = new javax.swing.JButton();
        orderBTN = new javax.swing.JButton();
        roundLBL = new javax.swing.JLabel();
        slimLBL = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cashFLD = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        changeFLD = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalFLD = new javax.swing.JTextField();
        cashRBT = new javax.swing.JRadioButton();
        creditRBT = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Order");
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jScrollPane1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Customer ID", "Name", "Address", "Contact No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("Name");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setText("Address");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("Contact No.");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("Customer ID");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Service Type");

        serviceCBX.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        serviceCBX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Walk-In", "Deliver" }));
        serviceCBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceCBXActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel6.setText("Gallon Type");

        gallonCBX.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        gallonCBX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Slim", "Round" }));

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel7.setText("Quantity");

        CIDFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        CIDFLD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CIDFLDKeyPressed(evt);
            }
        });

        nameFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        nameFLD.setEnabled(false);

        addressFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        addressFLD.setEnabled(false);

        contactFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        contactFLD.setEnabled(false);

        quantityFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        quantityFLD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantityFLDKeyPressed(evt);
            }
        });

        cancelBTN.setText("Cancel");
        cancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBTNActionPerformed(evt);
            }
        });

        orderBTN.setText("Order");
        orderBTN.setEnabled(false);
        orderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBTNActionPerformed(evt);
            }
        });

        roundLBL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        roundLBL.setText("Round: - ");

        slimLBL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        slimLBL.setText("Slim: - ");

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel8.setText("Cash");

        cashFLD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cashFLD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashFLDKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel9.setText("Change");

        changeFLD.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        changeFLD.setForeground(new java.awt.Color(51, 51, 255));
        changeFLD.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel10.setText("Total");

        totalFLD.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        totalFLD.setForeground(new java.awt.Color(51, 51, 255));
        totalFLD.setEnabled(false);

        transactionTypeBGP.add(cashRBT);
        cashRBT.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cashRBT.setText("Cash");
        cashRBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRBTActionPerformed(evt);
            }
        });

        transactionTypeBGP.add(creditRBT);
        creditRBT.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        creditRBT.setText("Credit");
        creditRBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditRBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel3))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(contactFLD)
                                        .addComponent(gallonCBX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nameFLD)
                                        .addComponent(addressFLD)
                                        .addComponent(serviceCBX, 0, 143, Short.MAX_VALUE)))
                                .addComponent(quantityFLD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(changeFLD, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(cashFLD)
                                    .addComponent(totalFLD)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(orderBTN)
                                        .addGap(84, 84, 84)
                                        .addComponent(cancelBTN))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(roundLBL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(creditRBT)
                                            .addComponent(slimLBL))
                                        .addGap(82, 82, 82)))
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cashRBT)
                                .addGap(174, 174, 174)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CIDFLD, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CIDFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameFLD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(addressFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(serviceCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gallonCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roundLBL)
                            .addComponent(slimLBL))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cashRBT)
                            .addComponent(creditRBT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cashFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(totalFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(changeFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBTN)
                    .addComponent(orderBTN))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void serviceCBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceCBXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serviceCBXActionPerformed

    private void cancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBTNActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_cancelBTNActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1)
        {
            Object CID = jTable1.getValueAt(selectedRow, 0);
            Object name = jTable1.getValueAt(selectedRow, 1);
            Object address = jTable1.getValueAt(selectedRow, 2);
            Object contact = jTable1.getValueAt(selectedRow, 3);
            CIDFLD.setText(CID.toString());
            nameFLD.setText(name.toString());
            addressFLD.setText(address.toString());
            contactFLD.setText(contact.toString());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void cashFLDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashFLDKeyPressed
        // TODO add your handling code here:
        doTransaction(evt);
    }//GEN-LAST:event_cashFLDKeyPressed

    private void CIDFLDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CIDFLDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            Connection conn = null;
            PreparedStatement ps = null;
            ResultSet rs = null;
            
            try
            {
                conn = SystemWRS.MsSqlDB();
                ps = conn.prepareStatement("SELECT * FROM customer where customer_no = ?");
                ps.setInt(1, Integer.parseInt(CIDFLD.getText()));
                rs = ps.executeQuery();
                
                if (rs.next())
                {
                    CIDFLD.setText(Integer.toString(rs.getInt("customer_no")));
                    nameFLD.setText(rs.getString("name"));
                    addressFLD.setText(rs.getString("address"));
                    contactFLD.setText(rs.getString("contact_no"));
                }      
            }
            catch(SQLException e)
            {
                JOptionPane.showMessageDialog(null,e.getMessage());
            }    
        }
    }//GEN-LAST:event_CIDFLDKeyPressed

    private void quantityFLDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityFLDKeyPressed
        // TODO add your handling code here:
        doTransaction(evt);
    }//GEN-LAST:event_quantityFLDKeyPressed

    private void orderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBTNActionPerformed
        // TODO add your handling code here:
        int TID = SystemWRS.generateID(8);
        String service = serviceCBX.getSelectedItem().toString();
        String gallon = gallonCBX.getSelectedItem().toString();
        int quantity = Integer.parseInt(quantityFLD.getText());
        int cash = Integer.parseInt(cashFLD.getText());
        int revenue = Integer.parseInt(totalFLD.getText());
        int change = Integer.parseInt(changeFLD.getText());
        
        int CID = Integer.parseInt(CIDFLD.getText());
        
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try
        {
            Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
            conn = SystemWRS.MsSqlDB();
            String pss = "INSERT INTO transaction (transaction_code, service_type, gallon_type, quantity, cash, revenue,`change`, date, customer_no, status)VALUES(?,?,?,?,?,?,?,?,?,?)";
            ps = conn.prepareStatement(pss);
            
            ps.setInt(1, TID);
            ps.setString(2, service);
            ps.setString(3, gallon);
            ps.setInt(4, quantity);
            ps.setInt(5, cash);
            ps.setInt(6, revenue);
            ps.setInt(7, change);
            ps.setTimestamp(8, currentTimestamp);
            ps.setInt(9, CID);
            
            int i = 0;
            if(cashRBT.isSelected())
            {
                ps.setString(10, cashRBT.getText());
                i = ps.executeUpdate();
            }
            else if(creditRBT.isSelected())
            {
                ps.setString(10, creditRBT.getText());
                i = ps.executeUpdate();
                ps = conn.prepareStatement("INSERT INTO credit (CDTID, Fcustomer_no, Ftransaction_code)VALUES(?,?,?)");
                ps.setInt(1, SystemWRS.generateID(8));
                ps.setInt(2, CID);
                ps.setInt(3, TID);
                i = ps.executeUpdate();
            }
            
            ps = conn.prepareStatement("INSERT INTO borrow (BID, Fcustomer_no, Ftransaction_code)VALUES(?,?,?)");
            ps.setInt(1, SystemWRS.generateID(8));
            ps.setInt(2, CID);
            ps.setInt(3, TID);
            i = ps.executeUpdate();
            
            if(i == 1)
            {
                JOptionPane.showMessageDialog(this,"Transaction successfully completed!");
                CIDFLD.setText("");
                nameFLD.setText("");
                addressFLD.setText("");
                contactFLD.setText("");
                quantityFLD.setText("");
                cashFLD.setText("");
                totalFLD.setText("");
                changeFLD.setText("");
                
                CIDFLD.setEnabled(true);
                nameFLD.setEnabled(true);
                addressFLD.setEnabled(true);
                contactFLD.setEnabled(true);
                quantityFLD.setEnabled(true);
                cashFLD.setEnabled(true);
                totalFLD.setEnabled(true);
                changeFLD.setEnabled(true);
                serviceCBX.setEnabled(true);
                gallonCBX.setEnabled(true);
                cashRBT.setEnabled(true);
                creditRBT.setEnabled(true);
                
                if(gallon == "Slim")
                {
                    ps = conn.prepareStatement("SELECT * FROM system_numeric_data WHERE DID = ?");
                    ps.setInt(1, 1002);
                    rs = ps.executeQuery();
                    int slim = 0;
                    if (rs.next())
                    {
                        slim = rs.getInt("value") - quantity;
                    }
                    
                    ps = conn.prepareStatement("UPDATE system_numeric_data SET value = ? WHERE DID = ?");
                    ps.setInt(1, slim);
                    ps.setInt(2, 1002);
                    ps.executeUpdate();
                }
                if(gallon == "Round")
                {
                    ps = conn.prepareStatement("SELECT * FROM system_numeric_data WHERE DID = ?");
                    ps.setInt(1, 1003);
                    rs = ps.executeQuery();
                    int round = 0;
                    if (rs.next())
                    {
                        round = rs.getInt("value") - quantity;
                    }
                    
                    ps = conn.prepareStatement("UPDATE system_numeric_data SET value = ? WHERE DID = ?");
                    ps.setInt(1, round);
                    ps.setInt(2, 1003);
                    ps.executeUpdate();
                }
                
                updateGallon();
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Transaction Failed");
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_orderBTNActionPerformed

    private void cashRBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashRBTActionPerformed
        // TODO add your handling code here:
        cashFLD.setEnabled(true);
    }//GEN-LAST:event_cashRBTActionPerformed

    private void creditRBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditRBTActionPerformed
        // TODO add your handling code here:
        cashFLD.setEnabled(false);
    }//GEN-LAST:event_creditRBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order().setVisible(true);
            }
        });
    }
    
    private void fetchCustomerData()
    {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        ResultSetMetaData rsmd = null;
        try
        {
            conn = SystemWRS.MsSqlDB();
            ps = conn.prepareStatement("select *from customer");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            
            int c = rsmd.getColumnCount();
            DefaultTableModel d = (DefaultTableModel)jTable1.getModel();
            d.setRowCount(0);
            
            while(rs.next()){
            
                Vector v2 = new Vector();
                for(int i = 1; i<=c; i++)
                {
                    v2.add(rs.getInt("customer_no"));
                    v2.add(rs.getString("name"));
                    v2.add(rs.getString("address"));
                    v2.add(rs.getString("contact_no"));
                }
                d.addRow(v2);  
            }
        }
        catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }
    
    private void doTransaction(java.awt.event.KeyEvent evt)
    {
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            if(cashRBT.isSelected())
            {
                if(!(CIDFLD.getText().equals("")) && !(quantityFLD.getText().equals("")) && !(cashFLD.getText().equals("")))
                {
                    int cash = Integer.parseInt(cashFLD.getText());
                    Connection conn = null;
                    PreparedStatement ps = null;
                    ResultSet rs = null;
                    try
                    {   
                        conn = SystemWRS.MsSqlDB();
                        int total = 0;
                        int change = 0;

                        if(gallonCBX.getSelectedIndex() == 0)
                        {
                            ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                            ps.setString(1, "Gallon_Slim");
                            rs = ps.executeQuery();
                            int slim_val = 0;
                            if (rs.next())
                            {
                                slim_val = rs.getInt("value");
                            }
                            
                            if(Integer.parseInt(quantityFLD.getText()) < slim_val)
                            {
                                ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                                ps.setString(1, "Slim_Price");
                                rs = ps.executeQuery();
                                int slim_price = 0;
                                int slim_price_dlv = 0;

                                if (rs.next())
                                {
                                    slim_price = rs.getInt("value");
                                    slim_price_dlv = rs.getInt("total");
                                }

                                if(serviceCBX.getSelectedIndex() == 0)
                                {
                                    total = slim_price * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                else if(serviceCBX.getSelectedIndex() == 1)
                                {
                                    total = slim_price_dlv * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                
                                if(total > cash)
                                {
                                    JOptionPane.showMessageDialog(null,"Insufficient Cash!");
                                }
                                else
                                {
                                    change = cash - total;
                                    changeFLD.setText(Integer.toString(change));

                                    lockSelectionCash();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null,"Not enough gallons available!");
                            }
                        }
                        else if(gallonCBX.getSelectedIndex() == 1)
                        {
                            ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                            ps.setString(1, "Gallon_Round");
                            rs = ps.executeQuery();
                            int round_val = 0;
                            if (rs.next())
                            {
                                round_val = rs.getInt("value");
                            }
                            
                            if(Integer.parseInt(quantityFLD.getText()) < round_val)
                            {
                                ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                                ps.setString(1, "Round_Price");
                                rs = ps.executeQuery();
                                int round_price = 0;
                                int round_price_dlv = 0;

                                if (rs.next())
                                {
                                    round_price = rs.getInt("value");
                                    round_price_dlv = rs.getInt("total");
                                }

                                if(serviceCBX.getSelectedIndex() == 0)
                                {
                                    total = round_price * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                else if(serviceCBX.getSelectedIndex() == 1)
                                {
                                    total = round_price_dlv * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                
                                if(total > cash)
                                {
                                    JOptionPane.showMessageDialog(null,"Insufficient Cash!");
                                }
                                else
                                {
                                    change = cash - total;
                                    changeFLD.setText(Integer.toString(change));

                                    lockSelectionCash();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null,"Not enough gallons available!");
                            }
                        }
                    }
                    catch (SQLException e)
                    {
                        JOptionPane.showMessageDialog(null,e.getMessage());
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"Please fill the information needed!");
                }
            }
            else if(creditRBT.isSelected())
            {
                if(!(CIDFLD.getText().equals("")) && !(quantityFLD.getText().equals("")))
                {
                    Connection conn = null;
                    PreparedStatement ps = null;
                    ResultSet rs = null;
                    try
                    {
                        conn = SystemWRS.MsSqlDB();
                        int total = 0;

                        if(gallonCBX.getSelectedIndex() == 0)
                        {
                            ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                            ps.setString(1, "Gallon_Slim");
                            rs = ps.executeQuery();
                            int slim_val = 0;
                            if (rs.next())
                            {
                                slim_val = rs.getInt("value");
                            }
                            
                            if(Integer.parseInt(quantityFLD.getText()) < slim_val)
                            {
                                ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                                ps.setString(1, "Slim_Price");
                                rs = ps.executeQuery();
                                int slim_price = 0;
                                int slim_price_dlv = 0;

                                if (rs.next())
                                {
                                    slim_price = rs.getInt("value");
                                    slim_price_dlv = rs.getInt("total");
                                }

                                if(serviceCBX.getSelectedIndex() == 0)
                                {
                                    total = slim_price * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                else if(serviceCBX.getSelectedIndex() == 1)
                                {
                                    total = slim_price_dlv * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                lockSelectionCredit();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null,"Not enough gallons available!");
                            }
                        }
                        else if(gallonCBX.getSelectedIndex() == 1)
                        {
                            ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                            ps.setString(1, "Gallon_Round");
                            rs = ps.executeQuery();
                            int round_val = 0;
                            if (rs.next())
                            {
                                round_val = rs.getInt("value");
                            }
                            
                            if(Integer.parseInt(quantityFLD.getText()) < round_val)
                            {
                                ps = conn.prepareStatement("SELECT * from system_numeric_data where name = ?");
                                ps.setString(1, "Round_Price");
                                rs = ps.executeQuery();
                                int round_price = 0;
                                int round_price_dlv = 0;

                                if (rs.next())
                                {
                                    round_price = rs.getInt("value");
                                    round_price_dlv = rs.getInt("total");
                                }

                                if(serviceCBX.getSelectedIndex() == 0)
                                {
                                    total = round_price * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                else if(serviceCBX.getSelectedIndex() == 1)
                                {
                                    total = round_price_dlv * Integer.parseInt(quantityFLD.getText());
                                    totalFLD.setText(Integer.toString(total));
                                }
                                lockSelectionCredit();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null,"Not enough gallons available!");
                            }                          
                        }
                    }
                    catch (SQLException e)
                    {
                        JOptionPane.showMessageDialog(null,e.getMessage());
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"Please fill the information needed!");
                }
            }
        }
    }
    
    private void lockSelectionCredit()
    {
        cashFLD.setText("0");
        changeFLD.setText("0");

        orderBTN.setEnabled(true);
        cashFLD.setEnabled(false);
        quantityFLD.setEnabled(false);
        serviceCBX.setEnabled(false);
        gallonCBX.setEnabled(false);
        CIDFLD.setEnabled(false);
        cashRBT.setEnabled(false);
        creditRBT.setEnabled(false);
    }
    
    private void lockSelectionCash()
    {
        orderBTN.setEnabled(true);
        cashFLD.setEnabled(false);
        quantityFLD.setEnabled(false);
        serviceCBX.setEnabled(false);
        gallonCBX.setEnabled(false);
        CIDFLD.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CIDFLD;
    private javax.swing.JTextField addressFLD;
    private javax.swing.JButton cancelBTN;
    private javax.swing.JTextField cashFLD;
    private javax.swing.JRadioButton cashRBT;
    private javax.swing.JTextField changeFLD;
    private javax.swing.JTextField contactFLD;
    private javax.swing.JRadioButton creditRBT;
    private javax.swing.JComboBox<String> gallonCBX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameFLD;
    private javax.swing.JButton orderBTN;
    private javax.swing.JTextField quantityFLD;
    private javax.swing.JLabel roundLBL;
    private javax.swing.JComboBox<String> serviceCBX;
    private javax.swing.JLabel slimLBL;
    private javax.swing.JTextField totalFLD;
    private javax.swing.ButtonGroup transactionTypeBGP;
    // End of variables declaration//GEN-END:variables
}
